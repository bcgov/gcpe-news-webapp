name: develop ci/cd pipeline
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'UAT'
    steps:
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4.10

      - name: setup tektoncd cli
        uses: tektoncd/actions/setup-tektoncd-cli@main
        with:
          version: latest
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_LOGIN_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}-tools
      
      - name: Trigger OpenShift Build
        run: |
          echo "Starting OpenShift build for news-webapp-master..."
          
          oc project ${{ secrets.OPENSHIFT_NAMESPACE }}-tools
          oc start-build news-webapp-master -n ${{ secrets.OPENSHIFT_NAMESPACE }}-tools --wait

          echo "OpenShift build triggered successfully!"

      - name: Check OpenShift Build Status
        run: |
          # Get the latest build for 'news-webapp-master'
          BUILD_NAME=$(oc get builds -n ${{ secrets.OPENSHIFT_NAMESPACE }}-tools -l "buildconfig=news-webapp-master" --sort-by=.metadata.creationTimestamp -o custom-columns=NAME:.metadata.name --no-headers | tail -n 1)
          echo "Monitoring build: $BUILD_NAME"
          oc logs -f build/$BUILD_NAME -n ${{ secrets.OPENSHIFT_NAMESPACE }}-tools
          oc get build $BUILD_NAME -n ${{ secrets.OPENSHIFT_NAMESPACE }}-tools -o jsonpath='{.status.phase}' | grep -q "Complete" || (echo "Build failed!" && exit 1)

      - name: Wait before tagging
        run: |
          echo "Waiting 1 minute before proceeding with tagging..."
          sleep 60
          echo "Wait complete, proceeding with tagging..."

      - name: Execute oc tag command
        id: oc_tag_command
        run: |
          SOURCE_IMAGE="news-webapp-master:latest"
          DESTINATION_IMAGE="news-webapp:uat"
          NAMESPACE="${{ secrets.OPENSHIFT_NAMESPACE }}-tools"

          echo "Attempting to tag '$SOURCE_IMAGE' to '$DESTINATION_IMAGE' in project '$NAMESPACE'..."
          oc tag "$SOURCE_IMAGE" "$DESTINATION_IMAGE" -n "$NAMESPACE"
          echo "Tagging command executed. Checking status..."
          

      - name: Verify New Tag
        run: |
          DEST_IMAGE_STREAM="news-webapp"
          DEST_TAG="uat"
          NAMESPACE="${{ secrets.OPENSHIFT_NAMESPACE }}-tools"

          echo "Describing ImageStream '${DEST_IMAGE_STREAM}' in namespace '${NAMESPACE}' to verify tag '${DEST_TAG}':"
          # 'grep -A 5' shows the line with the tag and the 5 lines following it (often includes image digest)
          # '|| true' prevents the step from failing if the grep command doesn't find a match immediately,
          # though in a successful scenario it should.
          oc describe is/"${DEST_IMAGE_STREAM}" -n "${NAMESPACE}" | grep -A 5 "Tag: ${DEST_TAG}" || true

          echo ""
          echo "For detailed information on the specific tag, run this in your terminal:"
          echo "oc get istag/${DEST_IMAGE_STREAM}:${DEST_TAG} -n ${NAMESPACE} -o yaml"

      - name: Wait before switching environments
        run: |
          echo "Waiting 1 minute before switching to test environment..."
          sleep 60
          echo "Wait complete, proceeding with environment switch..."

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_LOGIN_TOKEN_TEST }} # test/uat are in the same project
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}-test # test/uat are in the same project

      #- name: Restart OpenShift Deployment
      #  run: |
      #    oc project ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}
      #    oc patch deployment news-webapp -n ${{ secrets.OPENSHIFT_DEV_NAMESPACE }} \
      #    -p '{"spec": {"template": {"metadata": {"annotations": {"openshift.io/restartedAt": "'$(date +%s)'"}}}}}'

      - name: Restart Kubernetes Deployment
        run: |
          kubectl rollout restart deployment news-webapp-uat -n ${{ secrets.OPENSHIFT_NAMESPACE }}-test
      
      - name: Check Rollout Status
        run: |
          kubectl rollout status deployment/news-webapp-uat -n ${{ secrets.OPENSHIFT_NAMESPACE }}-test --timeout=90s